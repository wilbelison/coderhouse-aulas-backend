// DESAFIO OBRIGAT√ìRIO
// Gest√£o de arquivos em Javascript

// Vamos lembrar...

// Com base no desafio da aula 2:
// ‚úì Estruturamos nossa primeira classe
// ‚úì Adicionamos os m√©todos necess√°rios √† nossa classe para trabalhar com uma matriz de produtos
// Agora, adicionamos fileSystem para alterar o modelo de persist√™ncia atual.

// Voc√™ deve salvar os objetos no seguinte formato:

// ‚úì id (deve ser incrementado automaticamente, n√£o enviado no corpo)
// ‚úì title (nome do produto)
// ‚úì description (descri√ß√£o do produto)
// ‚úì price (pre√ßo)
// ‚úì thumbnail (caminho da imagem)
// ‚úì code (c√≥digo identificador)
// ‚úì stock (n√∫mero de pe√ßas dispon√≠veis)

// Objetivo:

// ‚úì Crie uma classe chamada ‚ÄúProductManager‚Äù, que permitir√° trabalhar com v√°rios produtos. Ele deve ser capaz de adicionar, consultar, modificar e excluir um produto e gerenci√°-lo em persist√™ncia de arquivo (com base na entrega 1)

// Aspectos a incluir:

// ‚úî A classe deve possuir uma vari√°vel this.path, que ser√° inicializada a partir do construtor e dever√° receber o caminho para trabalhar quando sua inst√¢ncia for gerada.
// ‚úî Ele deve ter um m√©todo addProduct que deve receber um objeto com o formato especificado anteriormente, atribuir a ele um id auto-incrementado e salv√°-lo no array (lembre-se de sempre salv√°-lo como um array no arquivo).
// ‚úî Voc√™ deve ter um m√©todo getProducts, que deve ler o arquivo de produtos e retornar todos os produtos em formato de array.
// ‚úî Deve possuir um m√©todo getProductById, que deve receber um id, e ap√≥s a leitura do arquivo, deve buscar o produto com o id especificado e retorn√°-lo em formato de objeto.
// ‚úî Deve ter um m√©todo updateProduct, que deve receber o id do produto a ser atualizado, assim como o campo a ser atualizado (pode ser o objeto inteiro, como em um BD), e deve atualizar o produto que possui esse id em o arquivo. SEU ID N√ÉO DEVE SER EXCLU√çDO
// ‚úî Voc√™ deve ter um m√©todo deleteProduct, que deve receber um id e deve deletar o produto com esse id no arquivo.

// Formato de entrega:

// ‚úî Arquivo Javascript chamado ProductManager.js

const titleStyle = "font-weight: bolder; font-size: 16px;";
console.group("%cProductManager", titleStyle);

const fs = require("fs");
class ProductManager {
  constructor(jsonPath) {
    this.jsonPath = jsonPath;
    this.products = this.loadProducts();
    this.id = this.products.length
      ? this.products[this.products.length - 1].id + 1
      : 1;
  }

  loadProducts() {
    try {
      return JSON.parse(fs.readFileSync(this.jsonPath, "utf-8"));
    } catch {
      return [];
    }
  }

  saveProducts() {
    fs.writeFileSync(this.jsonPath, JSON.stringify(this.products, null, 2));
  }

  addProduct(product) {
    const { title, description, price, thumbnail, code, stock } = product;
    if (!title || !description || !price || !thumbnail || !code || !stock) {
      console.error(
        "Oops! Voc√™ esqueceu algum ingrediente essencial do produto."
      );
      return;
    }
    if (this.products.some((p) => p.code === code)) {
      console.error(
        "Erro 404: C√≥digo de produto duplicado! Tente outra combina√ß√£o secreta."
      );
      return;
    }
    this.products.push({
      id: this.id++,
      title,
      description,
      price,
      thumbnail,
      code,
      stock,
    });
    this.saveProducts();
    console.log(
      `üéâ Uhul! Produto "${title}" adicionado com sucesso! Que tal adicionar outro?`
    );
  }

  getProducts() {
    return this.products;
  }

  getProductById(id) {
    const product = this.products.find((product) => product.id === id);
    if (!product)
      console.error(
        "A busca pelo produto falhou! Ele deve estar escondido em algum lugar."
      );
    return product;
  }

  updateProduct(id, updatedFields) {
    const product = this.getProductById(id);
    if (product) {
      Object.assign(product, updatedFields);
      this.saveProducts();
      console.log(
        `‚ú® O produto "${product.title}" passou por uma reforma e est√° atualizado!`
      );
    }
  }

  deleteProduct(id) {
    const index = this.products.findIndex((product) => product.id === id);
    if (index !== -1) {
      this.products.splice(index, 1);
      this.saveProducts();
      console.log(
        "üöÆ Produto deletado com sucesso. Adeus, amigo... Foi bom enquanto durou!"
      );
    } else {
      console.error(
        "Erro 404: Produto n√£o encontrado. Ser√° que ele foi abduzido?"
      );
    }
  }
}

const catalog = new ProductManager("./aula_4_desafio.json");

catalog.addProduct({
  title: "Refrigerante Alien√≠gena",
  description:
    "Um refresco importado diretamente da Gal√°xia de Andr√¥meda. Sabor extraterrestre com bolhas que flutuam!",
  price: 19.99,
  thumbnail: "./products/alien_soda.jpg",
  code: "ALIEN_SODA",
  stock: 33,
});

console.table(catalog.getProducts());

catalog.updateProduct(3, { price: 16.99 });
console.table(catalog.getProductById(4));

catalog.deleteProduct(3);

console.groupEnd();
